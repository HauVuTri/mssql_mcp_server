name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy
      
      - name: Run Ruff
        run: ruff check src tests
      
      - name: Check Black formatting
        run: black --check src tests
      
      - name: Run MyPy
        run: mypy src --ignore-missing-imports

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y freetds-dev
      
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install freetds
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .
      
      - name: Run unit tests
        run: |
          pytest tests/test_config.py tests/test_server.py -v
      
      - name: Run security tests
        run: |
          pytest tests/test_security.py -v
      
      - name: Run integration tests
        run: |
          pytest tests/test_integration.py -v
      
      - name: Run error handling tests
        run: |
          pytest tests/test_error_handling.py -v
      
      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          pip install pytest-cov
          pytest --cov=src/mssql_mcp_server --cov-report=xml --cov-report=html
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  integration-test:
    name: Integration Test with Real SQL Server
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong@Passw0rd
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y freetds-dev
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .
      
      - name: Wait for SQL Server
        run: |
          for i in {1..30}; do
            if python -c "import pymssql; pymssql.connect('localhost', 'sa', 'YourStrong@Passw0rd', 'master')"; then
              echo "SQL Server is ready"
              break
            fi
            echo "Waiting for SQL Server... ($i/30)"
            sleep 2
          done
      
      - name: Create test database
        run: |
          python -c "
          import pymssql
          conn = pymssql.connect('localhost', 'sa', 'YourStrong@Passw0rd', 'master')
          cursor = conn.cursor()
          cursor.execute('CREATE DATABASE TestDB')
          cursor.execute('USE TestDB')
          cursor.execute('CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(100))')
          cursor.execute('INSERT INTO users VALUES (1, \'Test User\')')
          conn.commit()
          conn.close()
          "
      
      - name: Test database connection
        env:
          MSSQL_SERVER: localhost
          MSSQL_USER: sa
          MSSQL_PASSWORD: YourStrong@Passw0rd
          MSSQL_DATABASE: TestDB
        run: |
          python test_connection.py
      
      - name: Run full integration tests
        env:
          MSSQL_SERVER: localhost
          MSSQL_USER: sa
          MSSQL_PASSWORD: YourStrong@Passw0rd
          MSSQL_DATABASE: TestDB
        run: |
          pytest tests/ -v

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong@Passw0rd
          MSSQL_PID: Developer
        ports:
          - 1433:1433
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y freetds-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install psutil
          pip install -e .
      
      - name: Run performance tests
        env:
          MSSQL_SERVER: localhost
          MSSQL_USER: sa
          MSSQL_PASSWORD: YourStrong@Passw0rd
          MSSQL_DATABASE: master
        run: |
          pytest tests/test_performance.py -v -s

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          docker build -t mssql-mcp-server:test .
      
      - name: Test Docker image
        run: |
          docker run --rm mssql-mcp-server:test python -c "import mssql_mcp_server; print('Import successful')"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
      
      - name: Run Safety check
        run: |
          pip install -r requirements.txt
          safety check --json
      
      - name: Run Bandit security scan
        run: |
          bandit -r src -f json -o bandit-report.json
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/